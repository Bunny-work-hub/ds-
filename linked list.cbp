                                                                                            #TREES
#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>
struct node{
    int data;
    struct node * llink;
    struct node * rlink;
};
typedef struct node * N;
N getnode(int );
void insert(N );
void dis(N );
int main(){
    int n;
    char a_1;
    N k;
    k=(N)malloc(sizeof(struct node));
    printf("enter the root data : ");
    scanf("%d",&n);
    k->data=n;
    k->llink=NULL;
    k->rlink=NULL;
    while(true){
        printf("would you like to insert a node : ");
        scanf(" %c",&a_1);
        if(a_1=='y'){
            insert(k);
        }
        else{
            break;
        }
    }
    dis(k);
}
void insert(N k){
    N t=k,l;
    int a;
    printf("enter the data of node: ");
    scanf("%d",&a);
    l=getnode(a);
    while((t->rlink!=NULL) || (t->llink==NULL)){
        if((t->data > l->data) && ((t->llink==NULL && t->rlink==NULL) || (t->llink)==NULL)){
            t->llink=l;
        }
        else if((t->data < l->data) && ((t->llink==NULL && t->rlink==NULL) || (t->rlink) ==NULL)){
            t->rlink=l;
        }
        else if(t->data > l->data){
            t=t->llink;
        }
        else if(t->data < l->data){
            t=t->rlink;
        }
    }
}
N getnode(int k_1){
    N k;
    k=(N)malloc(sizeof(struct node));
    k->data=k_1;
    k->llink=NULL;
    k->rlink=NULL;
    return k;
}
void dis(N k){
    N t=k;
    if(t==NULL){
        return;
    }
    dis(t->llink);
    printf("%d",t->data);
    dis(t->rlink);
}
