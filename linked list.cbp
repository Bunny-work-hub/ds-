                                                                                            #TREES
#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>
int l=0;
struct node{
int data;
struct node *llink;
struct node *rlink;
};
typedef struct node * N;
void insert(N );
void dis(N );
void search(N );
void del(N ,N );
int main(){
    N t;
    int a;
    char c;
    t=(N)malloc(sizeof(struct node));
    printf("enter the root node : ");
    scanf("%d",&a);
    t->data=a;
    t->llink =NULL;
    t->rlink =NULL;
    while(true){
        printf("would u like to insert node y delete d else e");
        scanf(" %c",&c);
        if(c=='y'){
            insert(t);
        }
        else if(c=='d'){
           search(t);
        }
        else{
            break;
        }
    }
    dis(t);
}
void insert(N root){
    int a;
    N t,k=root,p;
    t=(N)malloc(sizeof(struct node));
    printf("enter the data ");
    scanf("%d",&a);
    t->data=a;
    t->llink=NULL;
    t->rlink=NULL;
    while(k!=NULL){
        if(k->data > t->data){
            p=k;
            k=k->llink;
        }
        else{
            p=k;
            k=k->rlink;
        }
        
    }
    if(p->data > t->data){
        p->llink=t;
    }
    else{
        p->rlink=t;
    }
}
void del(N p,N t){
    N y,y_1;
    if(l == 1){
        if((t->llink==NULL) && (t->rlink ==NULL)){
            if(p->llink==t){
                p->llink=NULL;
            }
            else{
                p->rlink=NULL;
            }
        }
        else if((t->rlink!=NULL) && (t->llink!=NULL)){
            if(p->llink == t){
                y=t->llink;
                y_1=t->rlink;
                p->llink=t->rlink;
                
            }
            else{
                y=t->llink;
                y_1=t->rlink;
                p->rlink=t->rlink;
            }
            while(y_1->llink!=NULL){
                y_1=y_1->llink;
            }
            y_1->llink=y;
        }
        else{
            if(p->llink==t){
                if(t->llink ==NULL && t->rlink!=NULL){
                p->llink=t->rlink;
                }
                else{
                    p->llink=t->llink;
                }
            }
            else{
                  if(t->llink ==NULL && t->rlink!=NULL){
                p->rlink=t->rlink;
                }
                else{
                    p->rlink=t->llink;
                }
            }
        }
    }
    else{
        printf("element not found ");
    }
}
void search(N root){
    N t=root,p;
    int a;
    printf("enter the element that u want to delete : ");
    scanf("%d",&a);
    while(t!=NULL){
        if(t->data > a){
            p=t;
            t=t->llink;
        }
        else if(t->data == a){
            l=1;
            break;
        }
        else{
            p=t;
            t=t->rlink;
        }
    }
    del(p,t);
}
void dis(N root){
    N t=root;
    if(root==NULL){
        return;
    }
    dis(t->llink);
    printf("%d ",t->data);
    dis(t->rlink);
}
